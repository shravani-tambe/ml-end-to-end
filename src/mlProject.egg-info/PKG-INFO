Metadata-Version: 2.4
Name: mlProject
Version: 0.0.0
Summary: A small python package for ml app
Home-page: https://github.com/Shravani/ml-end-to-end
Author: Shravani
Author-email: shravani.tambe@gmail.com
Project-URL: Bug Tracker, https://github.com/Shravani/ml-end-to-end/issues
Dynamic: author
Dynamic: author-email
Dynamic: description
Dynamic: home-page
Dynamic: project-url
Dynamic: summary

# ml-end-to-end

End-to-End Machine Learning Project: From model training and testing to UI and AWS deployment.  
**Demo Project:** Wine Quality Prediction

## Project Structure

```bash
ml-end-to-end/
│
├── data/                   # Store datasets
│   ├── raw/                # Raw, unprocessed data
│   ├── processed/          # Processed data ready for training
│   └── external/           # External data (e.g., third-party datasets)
│
├── src/                    # Main source code
│   ├── __init__.py
│   ├── data/               # Data ingestion and preprocessing
│   │   ├── __init__.py
│   │   └── data_loader.py
│   ├── features/           # Feature engineering
│   │   ├── __init__.py
│   │   └── build_features.py
│   ├── models/             # Model training and evaluation
│   │   ├── __init__.py
│   │   ├── train.py
│   │   └── predict.py
│   ├── utils/              # Utility functions
│   │   ├── __init__.py
│   │   └── common.py
│   └── pipeline/           # End-to-end pipeline
│       ├── __init__.py
│       └── run_pipeline.py
│
├── config/                 # Configuration files
│   ├── config.yaml         # General configurations
│   ├── params.yaml         # Model parameters
│   └── schema.yaml         # Data schema
│
├── notebooks/              # Research and experimentation
│   └── eda.ipynb           # Exploratory Data Analysis (EDA)
│
├── tests/                  # Unit tests
│   ├── __init__.py
│   ├── test_data.py
│   └── test_model.py
│
├── app/                    # Deployment (e.g., Flask app)
│   ├── templates/          # HTML templates for web app
│   ├── app.py              # Flask/FastAPI app
│   └── main.py             # Entry point for deployment
│
├── models/                 # Store trained models
│   └── model_v1.pkl        # Serialized model
│
├── .gitignore              # Git ignore file
├── README.md               # Project documentation
├── requirements.txt        # Dependencies
├── setup.py                # Package setup
└── Dockerfile              # For containerization


Workflows
update config.yaml
update schema.yaml
update params.yaml
update the entity
update the configuration manager in src config
update the components
update the pipeline
update the main.py
update the app.py
How to run?
STEPS:
conda create -n mlproj python=3.8 -y
conda activate mlproj
pip install -r requirements.txt
python app.py
Now open up your local host 0.0.0.0:8080
AWS-CICD-Deployment-with-Github-Actions
1. Login to AWS console.
2. Create IAM user for deployment
#with specific access

1. EC2 access : It is virtual machine

2. ECR: Elastic Container registry to save your docker image in aws


#Description: About the deployment

1. Build docker image of the source code

2. Push your docker image to ECR

3. Launch Your EC2

4. Pull Your image from ECR in EC2

5. Lauch your docker image in EC2

#Policy:

1. AmazonEC2ContainerRegistryFullAccess

2. AmazonEC2FullAccess
3. Create ECR repo to store/save docker image
- Save the URI: 136566696263.dkr.ecr.us-east-1.amazonaws.com/mlproject
4. Create EC2 machine (Ubuntu)
5. Open EC2 and Install docker in EC2 Machine:
#optinal

sudo apt-get update -y

sudo apt-get upgrade

#required

curl -fsSL https://get.docker.com -o get-docker.sh

sudo sh get-docker.sh

sudo usermod -aG docker ubuntu

newgrp docker
6. Configure EC2 as self-hosted runner:
setting>actions>runner>new self hosted runner> choose os> then run command one by one
7. Setup github secrets:
AWS_ACCESS_KEY_ID=

AWS_SECRET_ACCESS_KEY=

AWS_REGION = us-east-1

AWS_ECR_LOGIN_URI = demo>>  566373416292.dkr.ecr.ap-south-1.amazonaws.com

ECR_REPOSITORY_NAME = simple-app
git config --global user.name "shravani-tambe"
```
